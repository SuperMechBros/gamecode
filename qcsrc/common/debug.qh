#pragma once

#ifdef CSQC
.entity tag_entity;
#endif

#ifdef GAMEQC
.bool debug;
.int sv_entnum;
REGISTER_NET_TEMP(net_debug)
#endif

#ifdef CSQC
	NET_HANDLE(net_debug, bool isNew)
	{
		Net_Accept(net_debug);
		this.sv_entnum = ReadShort();
		if (ReadByte()) make_pure(this);
		this.origin_x = ReadCoord();
		this.origin_y = ReadCoord();
		this.origin_z = ReadCoord();
		setorigin(this, this.origin);
		this.debug = true;  // identify server entities by this
		this.classname = strzone(ReadString());
		this.sourceLoc = strzone(ReadString());
		return true;
	}
#endif

#ifdef SVQC
	bool debug_send(entity this, entity to, int sf)
	{
		int channel = MSG_ONE;
		msg_entity = to;
		WriteHeader(channel, net_debug);
		WriteShort(channel, etof(this));
		WriteByte(channel, is_pure(this));
		vector o = this.origin;
		if (o == '0 0 0') // brushes
			o = (this.absmin + this.absmax) / 2;
		if (this.tag_entity)
			o += this.tag_entity.origin;
		WriteCoord(channel, o.x); WriteCoord(channel, o.y); WriteCoord(channel, o.z);
		WriteString(channel, this.classname);
		WriteString(channel, this.sourceLoc);
		return true;
	}
#endif

GENERIC_COMMAND(bufstr_get, "Examine a string buffer object")
{
	switch (request)
	{
		case CMD_REQUEST_COMMAND:
		{
			int bufhandle = stof(argv(1));
			int string_index = stof(argv(2));
			string s = bufstr_get(bufhandle, string_index);
			LOG_INFOF("%s\n", s);
			return;
		}

		default:
		case CMD_REQUEST_USAGE:
		{
			LOG_INFO(strcat("\nUsage:^3 ", GetProgramCommandPrefix(), " bufstr_get bufhandle string_index"));
			return;
		}
	}
}

GENERIC_COMMAND(version, "Print the current version")
{
	switch (request)
	{
		case CMD_REQUEST_COMMAND:
		{
			LOG_INFO(WATERMARK "\n");
			return;
		}
		default:
		case CMD_REQUEST_USAGE:
		{
			LOG_INFO(strcat("\nUsage:^3 ", GetProgramCommandPrefix(), " version"));
			return;
		}
	}
}

#ifdef CSQC
void(float bufhandle, string pattern, string antipattern) buf_cvarlist = #517;
#endif
GENERIC_COMMAND(cvar_localchanges, "Print locally changed cvars")
{
	switch (request)
	{
		case CMD_REQUEST_COMMAND:
		{
			string s = "";
			int h = buf_create();
			buf_cvarlist(h, "", "_"); // exclude all _ cvars as they are temporary
			int n = buf_getsize(h);
			for (int i = 0; i < n; ++i) {
				string k = bufstr_get(h, i);
				string v = cvar_string(k);
				string d = cvar_defstring(k);
				if (v == d)
					continue;
				s = strcat(s, k, " \"", v, "\" // \"", d, "\"\n");
			}
			buf_del(h);
			LOG_INFO(s);
			return;
		}
		default:
		case CMD_REQUEST_USAGE:
		{
			LOG_INFO(strcat("\nUsage:^3 ", GetProgramCommandPrefix(), " cvar_localchanges"));
			return;
		}
	}
}

#ifdef DEBUGTRACE
REGISTER_STAT(TRACE_ENT, int)
#ifdef SVQC
bool autocvar_debugtrace;

REGISTER_MUTATOR(trace, autocvar_debugtrace);

.bool debug_trace_button;
.int solid_prev;
MUTATOR_HOOKFUNCTION(trace, SV_StartFrame)
{
	FOREACH_CLIENT(true, {
		bool skip = false;
		bool btn = PHYS_INPUT_BUTTON_HOOK(it);
		if (btn == it.debug_trace_button) skip = true;
		it.debug_trace_button = btn;
		if (!btn || skip) continue;
		FOREACH_ENTITY(true, {
		    it.solid_prev = it.solid;
			it.solid = SOLID_BBOX;
		});
		vector forward = '0 0 0'; vector right = '0 0 0'; vector up = '0 0 0';
		MAKEVECTORS(makevectors, it.v_angle, forward, right, up);
		vector pos = it.origin + it.view_ofs;
		traceline(pos, pos + forward * max_shot_distance, MOVE_NORMAL, it);
		FOREACH_ENTITY(true, {
		    it.solid = it.solid_prev;
            it.solid_prev = 0;
		});
		entity e = trace_ent;
		int i = etof(e);
		STAT(TRACE_ENT, it) = i;
		if (!e) continue;
		setorigin(e, e.origin + '0 0 100');
		stuffcmd(it, sprintf("prvm_edict server %d\n", i));
	});
}
#endif
#ifdef CSQC
entity TRACE_ENT;
void Trace_draw2d(entity this)
{
	int e = STAT(TRACE_ENT);
	if (!e) return;
	vector pos = '0 0 0';
	pos.y += vid_conheight / 2;
	drawstring(pos, sprintf("prvm_edict server %d", e), '10 10 0', '1 1 1', 1, DRAWFLAG_NORMAL);
}

STATIC_INIT(TRACE_ENT)
{
	entity e = TRACE_ENT = new_pure(TRACE_ENT);
	e.draw2d = Trace_draw2d;
	IL_PUSH(g_drawables_2d, e);
}
#endif
#endif

GENERIC_COMMAND(find, "Search through entities for matching classname")
{
	switch (request)
	{
		case CMD_REQUEST_COMMAND:
		{
			int entcnt = 0;
			FOREACH_ENTITY_CLASS_ORDERED(argv(1), true,
			{
				LOG_INFOF("%i (%s)\n", it, it.classname);
				++entcnt;
			});
			if(entcnt)
				LOG_INFOF("Found %d entities\n", entcnt);
			return;
		}

		default:
		{
			LOG_INFO("Incorrect parameters for ^2find^7\n");
        }
		case CMD_REQUEST_USAGE:
		{
			LOG_INFO("\nUsage:^3 " GetProgramCommandPrefix() " find classname\n");
			LOG_INFO("  Where 'classname' is the classname to search for.\n");
			return;
		}
	}
}

GENERIC_COMMAND(findat, "Search through entities for matching origin")
{
	switch (request)
	{
		case CMD_REQUEST_COMMAND:
		{
		    vector match = stov(argv(1));
		    FOREACH_ENTITY_ORDERED(it.origin == match, LOG_INFOF("%i (%s)\n", it, it.classname));
			return;
		}

		default:
			LOG_INFO("Incorrect parameters for ^2findat^7\n");
		case CMD_REQUEST_USAGE:
		{
			LOG_INFO("\nUsage:^3 " GetProgramCommandPrefix() " findat \"0 0 0\"\n");
			return;
		}
	}
}
